
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import com.malrod.boxworldserver.*;
import Controladores.*;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\020\005\000\002\021\011" +
    "\000\002\021\011\000\002\003\005\000\002\006\011\000" +
    "\002\006\011\000\002\006\011\000\002\004\003\000\002" +
    "\004\005\000\002\004\004\000\002\004\006\000\002\004" +
    "\010\000\002\004\003\000\002\004\005\000\002\004\004" +
    "\000\002\004\006\000\002\005\011\000\002\005\007\000" +
    "\002\005\007\000\002\005\007\000\002\005\007\000\002" +
    "\005\011\000\002\005\011\000\002\011\005\000\002\011" +
    "\005\000\002\011\003\000\002\011\010\000\002\011\012" +
    "\000\002\011\012\000\002\011\012\000\002\011\012\000" +
    "\002\011\010\000\002\011\012\000\002\011\012\000\002" +
    "\011\012\000\002\011\012\000\002\016\003\000\002\016" +
    "\003\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\004\000\002\016\006\000" +
    "\002\017\003\000\002\017\003\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\004\000\002\017\006\000\002\013\006\000\002\015\006" +
    "\000\002\014\003\000\002\014\004\000\002\014\005\000" +
    "\002\012\011\000\002\012\011\000\002\012\011\000\002" +
    "\012\011\000\002\012\011\000\002\012\011\000\002\012" +
    "\011\000\002\007\003\000\002\007\005\000\002\010\003" +
    "\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\006\012\005\021\010\001\002\000\004\002" +
    "\000\001\002\000\004\021\317\001\002\000\004\002\ufffe" +
    "\001\002\000\004\002\315\001\002\000\010\036\013\042" +
    "\012\043\014\001\002\000\004\002\uffff\001\002\000\004" +
    "\021\310\001\002\000\004\021\303\001\002\000\004\021" +
    "\015\001\002\000\004\016\016\001\002\000\004\014\017" +
    "\001\002\000\006\012\021\021\010\001\002\000\006\015" +
    "\uffbb\020\uffbb\001\002\000\004\021\033\001\002\000\004" +
    "\015\027\001\002\000\006\015\uffbd\020\025\001\002\000" +
    "\006\015\uffba\020\uffba\001\002\000\006\012\021\021\010" +
    "\001\002\000\004\015\uffbc\001\002\000\012\002\ufff7\013" +
    "\ufff7\015\ufff7\020\ufff7\001\002\000\004\012\300\001\002" +
    "\000\006\013\ufff6\020\276\001\002\000\004\013\275\001" +
    "\002\000\030\023\132\024\130\025\126\026\131\036\013" +
    "\037\124\040\123\041\125\042\012\043\014\044\127\001" +
    "\002\000\006\013\ufff1\020\121\001\002\000\004\012\036" +
    "\001\002\000\004\021\041\001\002\000\006\013\uffc7\020" +
    "\117\001\002\000\004\013\114\001\002\000\020\027\044" +
    "\030\050\031\046\032\043\033\042\034\047\035\045\001" +
    "\002\000\004\021\107\001\002\000\004\021\102\001\002" +
    "\000\004\021\075\001\002\000\004\021\070\001\002\000" +
    "\004\021\063\001\002\000\004\021\056\001\002\000\004" +
    "\021\051\001\002\000\004\016\052\001\002\000\004\021" +
    "\053\001\002\000\004\022\054\001\002\000\004\021\055" +
    "\001\002\000\006\013\uffc3\020\uffc3\001\002\000\004\016" +
    "\057\001\002\000\004\021\060\001\002\000\004\022\061" +
    "\001\002\000\004\021\062\001\002\000\006\013\uffbf\020" +
    "\uffbf\001\002\000\004\016\064\001\002\000\004\021\065" +
    "\001\002\000\004\022\066\001\002\000\004\021\067\001" +
    "\002\000\006\013\uffc2\020\uffc2\001\002\000\004\016\071" +
    "\001\002\000\004\021\072\001\002\000\004\022\073\001" +
    "\002\000\004\021\074\001\002\000\006\013\uffbe\020\uffbe" +
    "\001\002\000\004\016\076\001\002\000\004\021\077\001" +
    "\002\000\004\022\100\001\002\000\004\021\101\001\002" +
    "\000\006\013\uffc4\020\uffc4\001\002\000\004\016\103\001" +
    "\002\000\004\021\104\001\002\000\004\022\105\001\002" +
    "\000\004\021\106\001\002\000\006\013\uffc1\020\uffc1\001" +
    "\002\000\004\016\110\001\002\000\004\021\111\001\002" +
    "\000\004\022\112\001\002\000\004\021\113\001\002\000" +
    "\006\013\uffc0\020\uffc0\001\002\000\006\013\ufff3\020\115" +
    "\001\002\000\004\021\033\001\002\000\004\013\ufff2\001" +
    "\002\000\006\013\uffc6\021\041\001\002\000\004\013\uffc5" +
    "\001\002\000\006\013\uffef\021\033\001\002\000\004\013" +
    "\ufff0\001\002\000\004\021\272\001\002\000\004\021\267" +
    "\001\002\000\004\021\260\001\002\000\004\021\255\001" +
    "\002\000\004\021\253\001\002\000\004\021\142\001\002" +
    "\000\004\021\140\001\002\000\004\021\133\001\002\000" +
    "\004\016\134\001\002\000\004\021\135\001\002\000\004" +
    "\017\136\001\002\000\004\021\137\001\002\000\006\013" +
    "\uffed\020\uffed\001\002\000\004\016\141\001\002\000\004" +
    "\012\uffc9\001\002\000\004\016\143\001\002\000\006\021" +
    "\146\047\144\001\002\000\010\013\uffe4\020\uffe4\021\uffe4" +
    "\001\002\000\006\013\uffec\020\uffec\001\002\000\012\047" +
    "\147\050\151\051\150\052\152\001\002\000\004\021\252" +
    "\001\002\000\004\010\213\001\002\000\004\021\212\001" +
    "\002\000\004\010\153\001\002\000\010\047\154\050\156" +
    "\052\157\001\002\000\022\004\202\005\203\006\201\007" +
    "\205\011\uffd0\047\154\050\156\052\157\001\002\000\004" +
    "\011\163\001\002\000\004\011\uffd1\001\002\000\004\010" +
    "\160\001\002\000\010\047\154\050\156\052\157\001\002" +
    "\000\004\011\162\001\002\000\004\011\uffca\001\002\000" +
    "\014\004\165\005\166\006\164\007\170\021\167\001\002" +
    "\000\006\021\146\047\144\001\002\000\006\021\146\047" +
    "\144\001\002\000\006\021\146\047\144\001\002\000\010" +
    "\013\uffde\020\uffde\021\uffde\001\002\000\006\021\146\047" +
    "\144\001\002\000\004\021\172\001\002\000\010\013\uffdc" +
    "\020\uffdc\021\uffdc\001\002\000\004\021\174\001\002\000" +
    "\010\013\uffda\020\uffda\021\uffda\001\002\000\004\021\176" +
    "\001\002\000\010\013\uffdb\020\uffdb\021\uffdb\001\002\000" +
    "\004\021\200\001\002\000\010\013\uffdd\020\uffdd\021\uffdd" +
    "\001\002\000\010\047\154\050\156\052\157\001\002\000" +
    "\010\047\154\050\156\052\157\001\002\000\010\047\154" +
    "\050\156\052\157\001\002\000\004\011\uffcb\001\002\000" +
    "\010\047\154\050\156\052\157\001\002\000\004\011\uffcc" +
    "\001\002\000\004\011\uffce\001\002\000\004\011\uffcf\001" +
    "\002\000\004\011\uffcd\001\002\000\010\013\uffe6\020\uffe6" +
    "\021\uffe6\001\002\000\010\047\214\050\217\051\216\001" +
    "\002\000\022\004\243\005\244\006\241\007\245\011\uffd8" +
    "\047\214\050\217\051\216\001\002\000\004\011\223\001" +
    "\002\000\004\010\220\001\002\000\004\011\uffd9\001\002" +
    "\000\010\047\214\050\217\051\216\001\002\000\004\011" +
    "\222\001\002\000\004\011\uffd2\001\002\000\014\004\225" +
    "\005\226\006\224\007\230\021\227\001\002\000\006\021" +
    "\146\047\144\001\002\000\006\021\146\047\144\001\002" +
    "\000\006\021\146\047\144\001\002\000\010\013\uffe3\020" +
    "\uffe3\021\uffe3\001\002\000\006\021\146\047\144\001\002" +
    "\000\004\021\232\001\002\000\010\013\uffe1\020\uffe1\021" +
    "\uffe1\001\002\000\004\021\234\001\002\000\010\013\uffdf" +
    "\020\uffdf\021\uffdf\001\002\000\004\021\236\001\002\000" +
    "\010\013\uffe0\020\uffe0\021\uffe0\001\002\000\004\021\240" +
    "\001\002\000\010\013\uffe2\020\uffe2\021\uffe2\001\002\000" +
    "\010\047\214\050\217\051\216\001\002\000\004\011\uffd3" +
    "\001\002\000\010\047\214\050\217\051\216\001\002\000" +
    "\010\047\214\050\217\051\216\001\002\000\010\047\214" +
    "\050\217\051\216\001\002\000\004\011\uffd4\001\002\000" +
    "\004\011\uffd6\001\002\000\004\011\uffd7\001\002\000\004" +
    "\011\uffd5\001\002\000\010\013\uffe5\020\uffe5\021\uffe5\001" +
    "\002\000\004\016\254\001\002\000\004\012\uffc8\001\002" +
    "\000\004\016\256\001\002\000\006\021\146\047\144\001" +
    "\002\000\006\013\uffeb\020\uffeb\001\002\000\004\016\261" +
    "\001\002\000\004\021\262\001\002\000\006\045\263\046" +
    "\264\001\002\000\004\021\266\001\002\000\004\021\265" +
    "\001\002\000\006\013\uffe7\020\uffe7\001\002\000\006\013" +
    "\uffe8\020\uffe8\001\002\000\004\016\270\001\002\000\006" +
    "\021\146\047\144\001\002\000\006\013\uffea\020\uffea\001" +
    "\002\000\004\016\273\001\002\000\006\021\146\047\144" +
    "\001\002\000\006\013\uffe9\020\uffe9\001\002\000\010\002" +
    "\ufffa\015\ufffa\020\ufffa\001\002\000\006\013\ufff4\021\033" +
    "\001\002\000\004\013\ufff5\001\002\000\004\021\033\001" +
    "\002\000\004\013\302\001\002\000\004\013\uffee\001\002" +
    "\000\004\016\304\001\002\000\004\014\305\001\002\000" +
    "\006\012\021\021\010\001\002\000\004\015\307\001\002" +
    "\000\012\002\ufff9\013\ufff9\015\ufff9\020\ufff9\001\002\000" +
    "\004\016\311\001\002\000\004\014\312\001\002\000\006" +
    "\012\021\021\010\001\002\000\004\015\314\001\002\000" +
    "\012\002\ufff8\013\ufff8\015\ufff8\020\ufff8\001\002\000\004" +
    "\002\001\001\002\000\004\013\334\001\002\000\034\023" +
    "\132\024\130\025\126\026\131\036\013\037\124\040\123" +
    "\041\125\042\012\043\014\044\127\053\320\054\321\001" +
    "\002\000\004\021\327\001\002\000\004\021\322\001\002" +
    "\000\004\016\323\001\002\000\004\021\324\001\002\000" +
    "\004\055\325\001\002\000\004\021\326\001\002\000\004" +
    "\013\ufffc\001\002\000\004\016\330\001\002\000\004\021" +
    "\331\001\002\000\004\017\332\001\002\000\004\021\333" +
    "\001\002\000\004\013\ufffb\001\002\000\004\002\ufffd\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\012\002\006\003\003\006\010\020\005\001" +
    "\001\000\002\001\001\000\016\004\031\005\030\006\033" +
    "\013\034\015\027\021\315\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\017\006\023\007\021" +
    "\010\022\001\001\000\002\001\001\000\014\004\031\005" +
    "\030\006\033\013\034\015\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\017\006" +
    "\023\007\025\010\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\036\014\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\004" +
    "\115\005\030\006\033\013\034\015\027\001\001\000\002" +
    "\001\001\000\006\012\036\014\117\001\001\000\002\001" +
    "\001\000\014\004\121\005\030\006\033\013\034\015\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\154\001\001\000\004\017\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\176\001\001\000\004\011\174" +
    "\001\001\000\004\011\172\001\001\000\002\001\001\000" +
    "\004\011\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\210\001\001\000\004\017\207\001\001\000\004\017" +
    "\206\001\001\000\002\001\001\000\004\017\205\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\214\001\001" +
    "\000\004\016\241\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\220\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\236\001\001\000\004\011\234\001\001\000\004\011\232" +
    "\001\001\000\002\001\001\000\004\011\230\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\250\001\001\000\002" +
    "\001\001\000\004\016\247\001\001\000\004\016\246\001" +
    "\001\000\004\016\245\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\256\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\270\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\273\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\276\005\030\006\033" +
    "\013\034\015\027\001\001\000\002\001\001\000\014\004" +
    "\300\005\030\006\033\013\034\015\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\017\006\023\007\305\010\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\017\006\023\007\312\010\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    public static LinkedList<TError> TablaES = new LinkedList<TError>(); 
    public static BoxWorldServer mandar = new BoxWorldServer();
    //declaracion de estructuras para evitar repeticiones
    String names, rowss, colss, configs, boards, boxess, targets, players;
    boolean nameP = false;
    boolean rowsP = false;
    boolean colsP = false;
    boolean configP = false;
    boolean boardP = false;
    boolean boxesP = false;
    boolean targetP = false;
    boolean playerP = false;
    boolean box_colorp = false;
    boolean box_onp = false;
    boolean brick_colorp = false;
    boolean hall_colorp = false;
    boolean target_colorp = false;
    boolean undefined_colorp = false;
    boolean player_colorp = false;

    

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        TError datos = new TError(lexema,fila,columna,"sintactico","Caracter no esperado");
        TablaES.add(datos);
        mandar.tablaErrores(lexema,fila,columna,"sintactico","Caracter no esperado");
        mandar.noMistakesSintactico(true);
     
    }
    //guardar numero de peraciones
    public void recover_operaciones(String op)  throws ScriptException
    {
      System.out.println("OPERACIONNN " + op);
       Context rhino = Context.enter();
        rhino.setOptimizationLevel(-1);
        Scriptable scope = rhino.initStandardObjects();
        String expression = op;
        try {
            Object result = rhino.evaluateString(scope, expression, "math", 1, null);
            System.out.println("RESULTADO:  " + result); // Output: 18
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            Context.exit();
        }
    }
    //NAME
    public void recover_name(String e)
    { 
       if (nameP== true){
         System.out.println("Error campo name ya existe");
         mandar.tablaErrores(e,1,1,"semantico","Campo name duplicado");
         mandar.noMistakes(true);

       }else { 
         if(mandar.validarNombre(e)==false){
         nameP = true;
         System.out.println("Guardando nombre del mundo:  " +e);
         mandar.saveName(e);
         } else{
         System.out.println("Mundo duplicado");
         mandar.tablaErrores(e,1,1,"semantico","Mundo duplicado");
         mandar.noMistakes(true); 
          }
       }
    }
    //ROWS
    public void recover_row(String e)
    { 
       if (rowsP== true){
         System.out.println("Error campo row ya existe");
         mandar.tablaErrores(e,1,1,"semantico","Campo row duplicado");
         mandar.noMistakes(true);

       }else { rowsP = true;
         System.out.println("Guardando row del mundo:  " +e);}
    }
    //COLS
    public void recover_cols(String e)
    { 
       if (colsP== true){
         System.out.println("Error campo cols ya existe");
         mandar.tablaErrores(e,1,1,"semantico","Campo cols duplicado");
         mandar.noMistakes(true);

       }else { colsP = true;
         System.out.println("Guardando cols del mundo:  " +e);}
    }
    //CONFIG
    public void recover_config()
    { 
       if (configP== true){
         System.out.println("Error campo config ya existe");
         mandar.tablaErrores("config",1,1,"semantico","Campo config duplicado");
         mandar.noMistakes(true);

       }else { configP = true;
         System.out.println("Guardando config del mundo:  " );}
    }

    //BOARD
    public void recover_board(String e)
    { 
       if (boardP== true){
         System.out.println("Error campo board ya existe");
         mandar.tablaErrores(e,1,1,"semantico","Campo board duplicado");
         mandar.noMistakes(true);

       }else { boardP = true;
         System.out.println("Guardando board del mundo:  " +e);}
    }
    //BOXES
    public void recover_boxes(String e)
    { 
       if (boxesP== true){
         System.out.println("Error campo boxes ya existe");
         mandar.tablaErrores(e,1,1,"semantico","Campo boxes duplicado");
         mandar.noMistakes(true);

       }else { boxesP = true;
         System.out.println("Guardando boxes del mundo:  " +e);}
    }   
    //TARGET
    public void recover_target(String e)
    { 
       if (targetP== true){
         System.out.println("Error campo target ya existe");
         mandar.tablaErrores(e,1,1,"semantico","Campo target duplicado");
         mandar.noMistakes(true);

       }else { targetP = true;
         System.out.println("Guardando target del mundo:  " +e);}
    }
    //PLAYER
    public void recover_player()
    { 
       if (playerP== true){
         System.out.println("Error campo player ya existe");
         mandar.tablaErrores("player",1,1,"semantico","Campo player duplicado");
         mandar.noMistakes(true);

       }else { playerP = true;
         System.out.println("Guardando player del mundo");}
    }
   //TODO LOS ELEMENTOS DE CONFIG
    public void recover_box_color()
    { 
       if (box_colorp == true){
         System.out.println("Error campo box_color ya existe");
         mandar.tablaErrores("boxcolor",1,1,"semantico","Campo box_color duplicado");
         mandar.noMistakes(true);
       }else { box_colorp = true; System.out.println("Guardando box_color del mundo");}
    }
    public void recover_box_on()
    { 
       if (box_onp == true){
         System.out.println("Error campo box_on_target_color ya existe");
         mandar.tablaErrores("boxontargetcolor",1,1,"semantico","Campo box_on_target_color duplicado");
         mandar.noMistakes(true);
       }else { box_onp = true; System.out.println("Guardando box_on_target_color del mundo");}
    }
    public void recover_brick_color()
    { 
       if (brick_colorp == true){
         System.out.println("Error campo brick_color ya existe");
         mandar.tablaErrores("brickcolor",1,1,"semantico","Campo brick color duplicado");
         mandar.noMistakes(true);
       }else { brick_colorp = true; System.out.println("Guardando brick_color del mundo");}
    }
    public void recover_hall_color()
    { 
       if (hall_colorp == true){
         System.out.println("Error campo hall_color ya existe");
         mandar.tablaErrores("hallcolor",1,1,"semantico","Campo hall color duplicado");
         mandar.noMistakes(true);
       }else { hall_colorp = true; System.out.println("Guardando hall_color del mundo");}
    }
    public void recover_target_color()
    { 
       if (target_colorp == true){
         System.out.println("Error campo target color ya existe");
         mandar.tablaErrores("targetcolor",1,1,"semantico","Campo hall color duplicado");
       }else { target_colorp = true; System.out.println("Guardando target_color del mundo");}
    }
    public void recover_undefined_color()
    { 
       if (undefined_colorp == true){
         System.out.println("Error campo undefined_color ya existe");
         mandar.tablaErrores("undefinedcolor",1,1,"semantico","Campo undefined color duplicado");
         mandar.noMistakes(true);
       }else { undefined_colorp = true; System.out.println("Guardando undefined_color del mundo");}
    }
    public void recover_player_color()
    { 
       if (player_colorp == true){
         System.out.println("Error campo player_color ya existe");
         mandar.tablaErrores("playercolor",1,1,"semantico","Campo player color duplicado");
         mandar.noMistakes(true);
       }else { player_colorp = true; System.out.println("Guardando player_color del mundo");}
    }
    public void recover_mundos(){
        mandar.peticionMundos(true);
    }
    public void recover_one_world(String e){
        mandar.peticionMundo(e);
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= JSON EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // JSON ::= OBJECT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // JSON ::= ARRAY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // JSON ::= LEVELS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LEVELS ::= llavea PETICION llaveb 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEVELS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PETICION ::= comilla WORLDS comilla dospuntos comilla ALL comilla 
            {
              Object RESULT =null;
		System.out.println("ENCONTRO WORLDS ALL"); recover_mundos(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PETICION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PETICION ::= comilla WORLD comilla dospuntos comilla cadena comilla 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("ENCONTRO WORLD "+e); recover_one_world(e.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PETICION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // OBJECT ::= llavea MEMBERS llaveb 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ARRAY ::= comilla BOARD comilla dospuntos cora ELEMENTS corb 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 recover_board(e.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ARRAY ::= comilla BOXES comilla dospuntos cora ELEMENTS corb 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 recover_boxes(e.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ARRAY ::= comilla TARGETS comilla dospuntos cora ELEMENTS corb 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 recover_target(e.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MEMBERS ::= PAIR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MEMBERS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MEMBERS ::= PAIR coma MEMBERS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MEMBERS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MEMBERS ::= PAIR coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MEMBERS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MEMBERS ::= OBJCONFIG llavea MCONFIG llaveb 
            {
              Object RESULT =null;
		 recover_config(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MEMBERS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MEMBERS ::= OBJCONFIG llavea MCONFIG llaveb coma MEMBERS 
            {
              Object RESULT =null;
		  recover_config(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MEMBERS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MEMBERS ::= ARRAY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MEMBERS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MEMBERS ::= ARRAY coma MEMBERS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MEMBERS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MEMBERS ::= ARRAY coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MEMBERS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // MEMBERS ::= OBJPLAYER llavea MEMBERS llaveb 
            {
              Object RESULT =null;
		 recover_player(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MEMBERS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PAIR ::= comilla NAME comilla dospuntos comilla cadena comilla 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 recover_name(e.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAIR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PAIR ::= comilla ROWS comilla dospuntos OPNUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 recover_row(e.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAIR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PAIR ::= comilla COLS comilla dospuntos OPNUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 recover_cols(e.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAIR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PAIR ::= comilla POSX comilla dospuntos OPNUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAIR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PAIR ::= comilla POSY comilla dospuntos OPNUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAIR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PAIR ::= comilla TYPE comilla dospuntos comilla BRICK comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAIR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PAIR ::= comilla TYPE comilla dospuntos comilla HALL comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAIR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPNUMERO ::= comilla operacion comilla 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 recover_operaciones(e.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPNUMERO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPNUMERO ::= comilla numero comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPNUMERO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPNUMERO ::= numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPNUMERO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPNUMERO ::= comilla FLOOR para OBJFLOOR parc comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPNUMERO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPNUMERO ::= comilla FLOOR para OBJFLOOR parc por OPNUMERO comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPNUMERO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPNUMERO ::= comilla FLOOR para OBJFLOOR parc div OPNUMERO comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPNUMERO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPNUMERO ::= comilla FLOOR para OBJFLOOR parc mas OPNUMERO comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPNUMERO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPNUMERO ::= comilla FLOOR para OBJFLOOR parc menos OPNUMERO comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPNUMERO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPNUMERO ::= comilla CEIL para OBJCEIL parc comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPNUMERO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPNUMERO ::= comilla CEIL para OBJCEIL parc por OPNUMERO comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPNUMERO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPNUMERO ::= comilla CEIL para OBJCEIL parc div OPNUMERO comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPNUMERO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPNUMERO ::= comilla CEIL para OBJCEIL parc mas OPNUMERO comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPNUMERO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPNUMERO ::= comilla CEIL para OBJCEIL parc menos OPNUMERO comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPNUMERO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OBJFLOOR ::= operacion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 recover_operaciones(e.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJFLOOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OBJFLOOR ::= numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJFLOOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OBJFLOOR ::= numero mas OBJFLOOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJFLOOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OBJFLOOR ::= numero menos OBJFLOOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJFLOOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OBJFLOOR ::= numero por OBJFLOOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJFLOOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OBJFLOOR ::= numero div OBJFLOOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJFLOOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OBJFLOOR ::= numero OBJFLOOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJFLOOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OBJFLOOR ::= FLOOR para OBJFLOOR parc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJFLOOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OBJCEIL ::= operacion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 recover_operaciones(e.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJCEIL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OBJCEIL ::= numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJCEIL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OBJCEIL ::= numero mas OBJCEIL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJCEIL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OBJCEIL ::= numero menos OBJCEIL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJCEIL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OBJCEIL ::= numero por OBJCEIL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJCEIL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OBJCEIL ::= numero div OBJCEIL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJCEIL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OBJCEIL ::= numero OBJCEIL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJCEIL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OBJCEIL ::= CEIL para OBJCEIL parc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJCEIL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OBJCONFIG ::= comilla CONFIG comilla dospuntos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJCONFIG",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OBJPLAYER ::= comilla PLAYER comilla dospuntos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJPLAYER",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MCONFIG ::= PCONFIG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MCONFIG",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // MCONFIG ::= PCONFIG coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MCONFIG",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // MCONFIG ::= PCONFIG coma MCONFIG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MCONFIG",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PCONFIG ::= comilla BOX_COLOR comilla dospuntos comilla HEX_COLOR comilla 
            {
              Object RESULT =null;
		 recover_box_color(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PCONFIG",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PCONFIG ::= comilla BOX_ON_TARGET_COLOR comilla dospuntos comilla HEX_COLOR comilla 
            {
              Object RESULT =null;
		 recover_box_on(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PCONFIG",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PCONFIG ::= comilla TARGET_COLOR comilla dospuntos comilla HEX_COLOR comilla 
            {
              Object RESULT =null;
		 recover_target_color(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PCONFIG",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PCONFIG ::= comilla BRICK_COLOR comilla dospuntos comilla HEX_COLOR comilla 
            {
              Object RESULT =null;
		 recover_brick_color(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PCONFIG",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PCONFIG ::= comilla HALL_COLOR comilla dospuntos comilla HEX_COLOR comilla 
            {
              Object RESULT =null;
		 recover_hall_color(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PCONFIG",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PCONFIG ::= comilla UNDEFINED_COLOR comilla dospuntos comilla HEX_COLOR comilla 
            {
              Object RESULT =null;
		 recover_undefined_color(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PCONFIG",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PCONFIG ::= comilla PLAYER_COLOR comilla dospuntos comilla HEX_COLOR comilla 
            {
              Object RESULT =null;
		 recover_player_color(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PCONFIG",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ELEMENTS ::= VALUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEMENTS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ELEMENTS ::= VALUE coma ELEMENTS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEMENTS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VALUE ::= OBJECT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VALUE ::= ARRAY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
