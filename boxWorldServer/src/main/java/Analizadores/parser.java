
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import com.malrod.boxworldserver.*;
import Controladores.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\005\000\002\006\011\000\002\006\011" +
    "\000\002\006\011\000\002\004\003\000\002\004\005\000" +
    "\002\004\004\000\002\004\006\000\002\004\010\000\002" +
    "\004\003\000\002\004\005\000\002\004\004\000\002\004" +
    "\006\000\002\005\011\000\002\005\007\000\002\005\007" +
    "\000\002\005\007\000\002\005\007\000\002\005\011\000" +
    "\002\005\011\000\002\011\005\000\002\011\005\000\002" +
    "\011\003\000\002\011\010\000\002\011\012\000\002\011" +
    "\012\000\002\011\012\000\002\011\012\000\002\011\010" +
    "\000\002\011\012\000\002\011\012\000\002\011\012\000" +
    "\002\011\012\000\002\016\003\000\002\016\003\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\004\000\002\016\006\000\002\017\003" +
    "\000\002\017\003\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\004\000\002" +
    "\017\006\000\002\013\006\000\002\015\006\000\002\014" +
    "\003\000\002\014\004\000\002\014\005\000\002\012\011" +
    "\000\002\012\011\000\002\012\011\000\002\012\011\000" +
    "\002\012\011\000\002\012\011\000\002\012\011\000\002" +
    "\007\003\000\002\007\005\000\002\010\003\000\002\010" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\006\012\005\021\007\001\002\000\004\002" +
    "\000\001\002\000\004\021\044\001\002\000\004\002\040" +
    "\001\002\000\010\036\012\042\011\043\013\001\002\000" +
    "\004\002\uffff\001\002\000\004\021\033\001\002\000\004" +
    "\021\026\001\002\000\004\021\014\001\002\000\004\016" +
    "\015\001\002\000\004\014\016\001\002\000\006\012\005" +
    "\021\007\001\002\000\006\015\uffbf\020\uffbf\001\002\000" +
    "\004\015\025\001\002\000\006\015\uffc1\020\023\001\002" +
    "\000\006\015\uffbe\020\uffbe\001\002\000\006\012\005\021" +
    "\007\001\002\000\004\015\uffc0\001\002\000\012\002\ufffb" +
    "\013\ufffb\015\ufffb\020\ufffb\001\002\000\004\016\027\001" +
    "\002\000\004\014\030\001\002\000\006\012\005\021\007" +
    "\001\002\000\004\015\032\001\002\000\012\002\ufffd\013" +
    "\ufffd\015\ufffd\020\ufffd\001\002\000\004\016\034\001\002" +
    "\000\004\014\035\001\002\000\006\012\005\021\007\001" +
    "\002\000\004\015\037\001\002\000\012\002\ufffc\013\ufffc" +
    "\015\ufffc\020\ufffc\001\002\000\004\002\001\001\002\000" +
    "\004\012\311\001\002\000\006\013\ufffa\020\307\001\002" +
    "\000\004\013\306\001\002\000\030\023\143\024\142\025" +
    "\137\026\141\036\012\037\136\040\134\041\135\042\011" +
    "\043\013\044\140\001\002\000\006\013\ufff5\020\132\001" +
    "\002\000\004\012\047\001\002\000\004\021\052\001\002" +
    "\000\006\013\uffcb\020\130\001\002\000\004\013\125\001" +
    "\002\000\020\027\055\030\061\031\057\032\054\033\053" +
    "\034\060\035\056\001\002\000\004\021\120\001\002\000" +
    "\004\021\113\001\002\000\004\021\106\001\002\000\004" +
    "\021\101\001\002\000\004\021\074\001\002\000\004\021" +
    "\067\001\002\000\004\021\062\001\002\000\004\016\063" +
    "\001\002\000\004\021\064\001\002\000\004\022\065\001" +
    "\002\000\004\021\066\001\002\000\006\013\uffc7\020\uffc7" +
    "\001\002\000\004\016\070\001\002\000\004\021\071\001" +
    "\002\000\004\022\072\001\002\000\004\021\073\001\002" +
    "\000\006\013\uffc3\020\uffc3\001\002\000\004\016\075\001" +
    "\002\000\004\021\076\001\002\000\004\022\077\001\002" +
    "\000\004\021\100\001\002\000\006\013\uffc6\020\uffc6\001" +
    "\002\000\004\016\102\001\002\000\004\021\103\001\002" +
    "\000\004\022\104\001\002\000\004\021\105\001\002\000" +
    "\006\013\uffc2\020\uffc2\001\002\000\004\016\107\001\002" +
    "\000\004\021\110\001\002\000\004\022\111\001\002\000" +
    "\004\021\112\001\002\000\006\013\uffc8\020\uffc8\001\002" +
    "\000\004\016\114\001\002\000\004\021\115\001\002\000" +
    "\004\022\116\001\002\000\004\021\117\001\002\000\006" +
    "\013\uffc5\020\uffc5\001\002\000\004\016\121\001\002\000" +
    "\004\021\122\001\002\000\004\022\123\001\002\000\004" +
    "\021\124\001\002\000\006\013\uffc4\020\uffc4\001\002\000" +
    "\006\013\ufff7\020\126\001\002\000\004\021\044\001\002" +
    "\000\004\013\ufff6\001\002\000\006\013\uffca\021\052\001" +
    "\002\000\004\013\uffc9\001\002\000\006\013\ufff3\021\044" +
    "\001\002\000\004\013\ufff4\001\002\000\004\021\303\001" +
    "\002\000\004\021\274\001\002\000\004\021\271\001\002" +
    "\000\004\021\266\001\002\000\004\021\264\001\002\000" +
    "\004\021\262\001\002\000\004\021\151\001\002\000\004" +
    "\021\144\001\002\000\004\016\145\001\002\000\004\021" +
    "\146\001\002\000\004\017\147\001\002\000\004\021\150" +
    "\001\002\000\006\013\ufff1\020\ufff1\001\002\000\004\016" +
    "\152\001\002\000\006\021\155\047\153\001\002\000\010" +
    "\013\uffe8\020\uffe8\021\uffe8\001\002\000\006\013\ufff0\020" +
    "\ufff0\001\002\000\012\047\156\050\160\051\157\052\161" +
    "\001\002\000\004\021\261\001\002\000\004\010\222\001" +
    "\002\000\004\021\221\001\002\000\004\010\162\001\002" +
    "\000\010\047\163\050\165\052\166\001\002\000\022\004" +
    "\211\005\212\006\210\007\214\011\uffd4\047\163\050\165" +
    "\052\166\001\002\000\004\011\172\001\002\000\004\011" +
    "\uffd5\001\002\000\004\010\167\001\002\000\010\047\163" +
    "\050\165\052\166\001\002\000\004\011\171\001\002\000" +
    "\004\011\uffce\001\002\000\014\004\174\005\175\006\173" +
    "\007\177\021\176\001\002\000\006\021\155\047\153\001" +
    "\002\000\006\021\155\047\153\001\002\000\006\021\155" +
    "\047\153\001\002\000\010\013\uffe2\020\uffe2\021\uffe2\001" +
    "\002\000\006\021\155\047\153\001\002\000\004\021\201" +
    "\001\002\000\010\013\uffe0\020\uffe0\021\uffe0\001\002\000" +
    "\004\021\203\001\002\000\010\013\uffde\020\uffde\021\uffde" +
    "\001\002\000\004\021\205\001\002\000\010\013\uffdf\020" +
    "\uffdf\021\uffdf\001\002\000\004\021\207\001\002\000\010" +
    "\013\uffe1\020\uffe1\021\uffe1\001\002\000\010\047\163\050" +
    "\165\052\166\001\002\000\010\047\163\050\165\052\166" +
    "\001\002\000\010\047\163\050\165\052\166\001\002\000" +
    "\004\011\uffcf\001\002\000\010\047\163\050\165\052\166" +
    "\001\002\000\004\011\uffd0\001\002\000\004\011\uffd2\001" +
    "\002\000\004\011\uffd3\001\002\000\004\011\uffd1\001\002" +
    "\000\010\013\uffea\020\uffea\021\uffea\001\002\000\010\047" +
    "\223\050\226\051\225\001\002\000\022\004\252\005\253" +
    "\006\250\007\254\011\uffdc\047\223\050\226\051\225\001" +
    "\002\000\004\011\232\001\002\000\004\010\227\001\002" +
    "\000\004\011\uffdd\001\002\000\010\047\223\050\226\051" +
    "\225\001\002\000\004\011\231\001\002\000\004\011\uffd6" +
    "\001\002\000\014\004\234\005\235\006\233\007\237\021" +
    "\236\001\002\000\006\021\155\047\153\001\002\000\006" +
    "\021\155\047\153\001\002\000\006\021\155\047\153\001" +
    "\002\000\010\013\uffe7\020\uffe7\021\uffe7\001\002\000\006" +
    "\021\155\047\153\001\002\000\004\021\241\001\002\000" +
    "\010\013\uffe5\020\uffe5\021\uffe5\001\002\000\004\021\243" +
    "\001\002\000\010\013\uffe3\020\uffe3\021\uffe3\001\002\000" +
    "\004\021\245\001\002\000\010\013\uffe4\020\uffe4\021\uffe4" +
    "\001\002\000\004\021\247\001\002\000\010\013\uffe6\020" +
    "\uffe6\021\uffe6\001\002\000\010\047\223\050\226\051\225" +
    "\001\002\000\004\011\uffd7\001\002\000\010\047\223\050" +
    "\226\051\225\001\002\000\010\047\223\050\226\051\225" +
    "\001\002\000\010\047\223\050\226\051\225\001\002\000" +
    "\004\011\uffd8\001\002\000\004\011\uffda\001\002\000\004" +
    "\011\uffdb\001\002\000\004\011\uffd9\001\002\000\010\013" +
    "\uffe9\020\uffe9\021\uffe9\001\002\000\004\016\263\001\002" +
    "\000\004\012\uffcd\001\002\000\004\016\265\001\002\000" +
    "\004\012\uffcc\001\002\000\004\016\267\001\002\000\006" +
    "\021\155\047\153\001\002\000\006\013\uffef\020\uffef\001" +
    "\002\000\004\016\272\001\002\000\006\021\155\047\153" +
    "\001\002\000\006\013\uffee\020\uffee\001\002\000\004\016" +
    "\275\001\002\000\004\021\276\001\002\000\006\045\277" +
    "\046\300\001\002\000\004\021\302\001\002\000\004\021" +
    "\301\001\002\000\006\013\uffeb\020\uffeb\001\002\000\006" +
    "\013\uffec\020\uffec\001\002\000\004\016\304\001\002\000" +
    "\006\021\155\047\153\001\002\000\006\013\uffed\020\uffed" +
    "\001\002\000\010\002\ufffe\015\ufffe\020\ufffe\001\002\000" +
    "\006\013\ufff8\021\044\001\002\000\004\013\ufff9\001\002" +
    "\000\004\021\044\001\002\000\004\013\313\001\002\000" +
    "\004\013\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\311\000\010\002\005\003\003\006\007\001\001\000" +
    "\002\001\001\000\014\004\042\005\041\006\044\013\045" +
    "\015\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\016\006\021\007\017\010\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\016\006\021\007\023\010\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\016\006\021\007\030\010\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\016\006\021\007\035\010\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\047\014\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\126" +
    "\005\041\006\044\013\045\015\040\001\001\000\002\001" +
    "\001\000\006\012\047\014\130\001\001\000\002\001\001" +
    "\000\014\004\132\005\041\006\044\013\045\015\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\163\001\001\000\004\017" +
    "\212\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\205\001\001" +
    "\000\004\011\203\001\001\000\004\011\201\001\001\000" +
    "\002\001\001\000\004\011\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\217\001\001\000\004\017\216\001" +
    "\001\000\004\017\215\001\001\000\002\001\001\000\004" +
    "\017\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\223\001\001\000\004\016\250\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\227" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\245\001\001\000\004\011\243\001\001" +
    "\000\004\011\241\001\001\000\002\001\001\000\004\011" +
    "\237\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\257" +
    "\001\001\000\002\001\001\000\004\016\256\001\001\000" +
    "\004\016\255\001\001\000\004\016\254\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\267\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\272\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\304\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\307\005\041\006\044\013" +
    "\045\015\040\001\001\000\002\001\001\000\014\004\311" +
    "\005\041\006\044\013\045\015\040\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    public static LinkedList<TError> TablaES = new LinkedList<TError>(); 
    public static BoxWorldServer mandar = new BoxWorldServer();

    

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        TError datos = new TError(lexema,fila,columna,"sintactico","Caracter no esperado");
        TablaES.add(datos);
        mandar.tablaErrores(lexema,fila,columna,"sintactico","Caracter no esperado");
        mandar.noMistakes(true);
     
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= JSON EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // JSON ::= OBJECT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // JSON ::= ARRAY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("JSON",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OBJECT ::= llavea MEMBERS llaveb 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJECT",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ARRAY ::= comilla BOARD comilla dospuntos cora ELEMENTS corb 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ARRAY ::= comilla BOXES comilla dospuntos cora ELEMENTS corb 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ARRAY ::= comilla TARGETS comilla dospuntos cora ELEMENTS corb 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARRAY",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MEMBERS ::= PAIR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MEMBERS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MEMBERS ::= PAIR coma MEMBERS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MEMBERS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MEMBERS ::= PAIR coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MEMBERS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MEMBERS ::= OBJCONFIG llavea MCONFIG llaveb 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MEMBERS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MEMBERS ::= OBJCONFIG llavea MCONFIG llaveb coma MEMBERS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MEMBERS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MEMBERS ::= ARRAY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MEMBERS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MEMBERS ::= ARRAY coma MEMBERS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MEMBERS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MEMBERS ::= ARRAY coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MEMBERS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MEMBERS ::= OBJPLAYER llavea MEMBERS llaveb 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MEMBERS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PAIR ::= comilla NAME comilla dospuntos comilla cadena comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAIR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PAIR ::= comilla ROWS comilla dospuntos OPNUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAIR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PAIR ::= comilla COLS comilla dospuntos OPNUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAIR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PAIR ::= comilla POSX comilla dospuntos OPNUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAIR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PAIR ::= comilla POSY comilla dospuntos OPNUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAIR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PAIR ::= comilla TYPE comilla dospuntos comilla BRICK comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAIR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PAIR ::= comilla TYPE comilla dospuntos comilla HALL comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAIR",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPNUMERO ::= comilla operacion comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPNUMERO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPNUMERO ::= comilla numero comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPNUMERO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPNUMERO ::= numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPNUMERO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPNUMERO ::= comilla FLOOR para OBJFLOOR parc comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPNUMERO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPNUMERO ::= comilla FLOOR para OBJFLOOR parc por OPNUMERO comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPNUMERO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPNUMERO ::= comilla FLOOR para OBJFLOOR parc div OPNUMERO comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPNUMERO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPNUMERO ::= comilla FLOOR para OBJFLOOR parc mas OPNUMERO comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPNUMERO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPNUMERO ::= comilla FLOOR para OBJFLOOR parc menos OPNUMERO comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPNUMERO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPNUMERO ::= comilla CEIL para OBJCEIL parc comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPNUMERO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPNUMERO ::= comilla CEIL para OBJCEIL parc por OPNUMERO comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPNUMERO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPNUMERO ::= comilla CEIL para OBJCEIL parc div OPNUMERO comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPNUMERO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPNUMERO ::= comilla CEIL para OBJCEIL parc mas OPNUMERO comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPNUMERO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPNUMERO ::= comilla CEIL para OBJCEIL parc menos OPNUMERO comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPNUMERO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OBJFLOOR ::= operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJFLOOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OBJFLOOR ::= numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJFLOOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OBJFLOOR ::= numero mas OBJFLOOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJFLOOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OBJFLOOR ::= numero menos OBJFLOOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJFLOOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OBJFLOOR ::= numero por OBJFLOOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJFLOOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OBJFLOOR ::= numero div OBJFLOOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJFLOOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OBJFLOOR ::= numero OBJFLOOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJFLOOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OBJFLOOR ::= FLOOR para OBJFLOOR parc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJFLOOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OBJCEIL ::= operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJCEIL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OBJCEIL ::= numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJCEIL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OBJCEIL ::= numero mas OBJCEIL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJCEIL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OBJCEIL ::= numero menos OBJCEIL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJCEIL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OBJCEIL ::= numero por OBJCEIL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJCEIL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OBJCEIL ::= numero div OBJCEIL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJCEIL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OBJCEIL ::= numero OBJCEIL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJCEIL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OBJCEIL ::= CEIL para OBJCEIL parc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJCEIL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OBJCONFIG ::= comilla CONFIG comilla dospuntos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJCONFIG",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OBJPLAYER ::= comilla PLAYER comilla dospuntos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OBJPLAYER",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // MCONFIG ::= PCONFIG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MCONFIG",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // MCONFIG ::= PCONFIG coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MCONFIG",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MCONFIG ::= PCONFIG coma MCONFIG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MCONFIG",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PCONFIG ::= comilla BOX_COLOR comilla dospuntos comilla HEX_COLOR comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PCONFIG",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PCONFIG ::= comilla BOX_ON_TARGET_COLOR comilla dospuntos comilla HEX_COLOR comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PCONFIG",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PCONFIG ::= comilla TARGET_COLOR comilla dospuntos comilla HEX_COLOR comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PCONFIG",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PCONFIG ::= comilla BRICK_COLOR comilla dospuntos comilla HEX_COLOR comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PCONFIG",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PCONFIG ::= comilla HALL_COLOR comilla dospuntos comilla HEX_COLOR comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PCONFIG",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PCONFIG ::= comilla UNDEFINED_COLOR comilla dospuntos comilla HEX_COLOR comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PCONFIG",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PCONFIG ::= comilla PLAYER_COLOR comilla dospuntos comilla HEX_COLOR comilla 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PCONFIG",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ELEMENTS ::= VALUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEMENTS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ELEMENTS ::= VALUE coma ELEMENTS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELEMENTS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VALUE ::= OBJECT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VALUE ::= ARRAY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALUE",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
